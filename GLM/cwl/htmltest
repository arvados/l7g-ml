<!doctype html><html><head>
        <title>ncvReg.cwl stats</title>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dygraph/2.0.0/dygraph.min.js"></script>
        <script type="text/javascript">var chartdata = [{"charts": [{"data": [[10.0, 0.3679889603311901, 0.35798926032219036, 0.009999700008999732], [20.0, 0.0, 0.0, 0.0], [30.0, 0.001, 0.001, 0.0], [40.0, 0.0, 0.0, 0.0], [50.0, 0.0, 0.0, 0.0], [60.0, 0.0, 0.0, 0.0], [70.0, 0.0, 0.0, 0.0], [80.0, 0.0, 0.0, 0.0], [90.0, 0.0, 0.0, 0.0], [100.0, 0.0, 0.0, 0.0], [110.0, 0.0, 0.0, 0.0], [120.0, 0.0, 0.0, 0.0], [130.0, 0.0, 0.0, 0.0], [140.0, 0.001, 0.0, 0.001], [150.0, 0.0, 0.0, 0.0], [160.0, 0.0, 0.0, 0.0], [170.0, 0.0, 0.0, 0.0], [180.0, 0.0, 0.0, 0.0], [190.0, 0.0, 0.0, 0.0], [200.0, 0.0, 0.0, 0.0], [210.0, 0.001, 0.001, 0.0], [220.0, 0.0, 0.0, 0.0], [230.0, 0.0, 0.0, 0.0], [240.0, 0.001, 0.001, 0.0], [250.0, 0.0, 0.0, 0.0], [260.0, 0.0, 0.0, 0.0], [270.0, 0.001, 0.001, 0.0], [280.0, 0.001, 0.001, 0.0]], "options": {"labels": ["elapsed", "user+sys__rate", "user__rate", "sys__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "ncvReg.cwl: cpu"}}, {"data": [[0.0, 6799360], [10.0, 51171328], [20.0, 51171328], [30.0, 51306496], [40.0, 51306496], [50.0, 51306496], [60.0, 51306496], [70.0, 51306496], [80.0, 51306496], [90.0, 51441664], [100.0, 51441664], [110.0, 51441664], [120.0, 51441664], [130.0, 51441664], [140.0, 51441664], [150.0, 51576832], [160.0, 51576832], [170.0, 51576832], [180.0, 51576832], [190.0, 51576832], [200.0, 51712000], [210.0, 51712000], [220.0, 51712000], [230.0, 51712000], [240.0, 51712000], [250.0, 51712000], [260.0, 51712000], [270.0, 51712000], [280.0, 51712000]], "options": {"labels": ["elapsed", "rss"], "connectSeparatedPoints": true, "legend": "always", "title": "ncvReg.cwl: mem"}}, {"data": [[20.0, 871.9087190871909, 685.3068530685307, 186.6018660186602], [30.0, 361.7, 299.2, 62.5], [40.0, 62.9, 7.0, 55.9], [50.0, 314.2031420314203, 303.4030340303403, 10.80010800108001], [60.0, 361.7, 299.2, 62.5], [70.0, 398.6960130398696, 328.39671603283966, 70.29929700702994], [80.0, 361.68914932552025, 299.19102426927196, 62.49812505624832], [90.0, 370.1148045921837, 303.4121364854594, 66.70266810672427], [100.0, 55.9, 0.0, 55.9], [110.0, 305.78776848926043, 299.18803247870085, 6.599736010559577], [120.0, 370.1148045921837, 303.4121364854594, 66.70266810672427], [130.0, 368.7, 306.2, 62.5], [140.0, 361.7, 299.2, 62.5], [150.0, 361.7, 299.2, 62.5], [160.0, 64.3, 4.2, 60.1], [170.0, 305.8, 299.2, 6.6], [180.0, 361.7, 299.2, 62.5], [190.0, 370.09629903700966, 303.3969660303397, 66.69933300666993], [200.0, 361.7, 299.2, 62.5], [210.0, 361.7, 299.2, 62.5], [220.0, 55.9, 0.0, 55.9], [230.0, 314.2, 303.4, 10.8], [240.0, 361.7, 299.2, 62.5], [250.0, 361.7, 299.2, 62.5], [260.0, 368.7, 306.2, 62.5], [270.0, 370.1, 303.4, 66.7], [280.0, 55.9, 0.0, 55.9]], "options": {"labels": ["elapsed", "tx+rx__rate", "rx__rate", "tx__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "ncvReg.cwl: net:eth0"}}, {"data": [[8.0, 0.0, 0.0, 0.0], [18.0, 0.0, 0.0, 0.0], [28.0, 0.0, 0.0, 0.0], [38.0, 0.0, 0.0, 0.0], [48.0, 0.0, 0.0, 0.0], [58.0, 0.0, 0.0, 0.0], [68.0, 0.0, 0.0, 0.0], [78.0, 0.0, 0.0, 0.0], [88.0, 0.0, 0.0, 0.0], [98.0, 0.0, 0.0, 0.0], [108.0, 0.0, 0.0, 0.0], [118.0, 0.0, 0.0, 0.0], [128.0, 0.0, 0.0, 0.0], [138.0, 0.0, 0.0, 0.0], [148.0, 0.0, 0.0, 0.0], [158.0, 0.0, 0.0, 0.0], [168.0, 0.0, 0.0, 0.0], [178.0, 0.0, 0.0, 0.0], [189.0, 0.0, 0.0, 0.0], [199.0, 0.0, 0.0, 0.0], [209.0, 0.0, 0.0, 0.0], [219.0, 0.0, 0.0, 0.0], [229.0, 0.0, 0.0, 0.0], [239.0, 0.0, 0.0, 0.0], [249.0, 0.0, 0.0, 0.0], [259.0, 0.0, 0.0, 0.0], [269.0, 0.0, 0.0, 0.0], [279.0, 0.0, 0.0, 0.0]], "options": {"labels": ["elapsed", "tx+rx__rate", "rx__rate", "tx__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "ncvReg.cwl: net:keep0"}}, {"data": [[0.0, 2002096128, 8255877120], [10.0, 2002325504, 8255877120], [20.0, 2002325504, 8255877120], [30.0, 2002325504, 8255877120], [40.0, 2002325504, 8255877120], [50.0, 2002325504, 8255877120], [60.0, 2002325504, 8255877120], [70.0, 2002325504, 8255877120], [80.0, 2002329600, 8255877120], [90.0, 2002333696, 8255877120], [100.0, 2002333696, 8255877120], [110.0, 2002333696, 8255877120], [120.0, 2002333696, 8255877120], [130.0, 2002333696, 8255877120], [140.0, 2002333696, 8255877120], [150.0, 2002333696, 8255877120], [160.0, 2002333696, 8255877120], [170.0, 2002333696, 8255877120], [180.0, 2002333696, 8255877120], [190.0, 2002337792, 8255877120], [200.0, 2002337792, 8255877120], [210.0, 2002337792, 8255877120], [220.0, 2002337792, 8255877120], [230.0, 2002337792, 8255877120], [240.0, 2002337792, 8255877120], [250.0, 2002337792, 8255877120], [260.0, 2002337792, 8255877120], [270.0, 2002337792, 8255877120], [280.0, 2002337792, 8255877120]], "options": {"labels": ["elapsed", "used", "total"], "connectSeparatedPoints": true, "legend": "always", "title": "ncvReg.cwl: statfs"}}], "label": "ncvReg.cwl (2xpu4-xvhdp-of545024x3tm22z) -- elapsed time 4m40s"}, {"charts": [{"data": [[10.0, 0.8259834803303934, 0.3139937201255975, 0.5119897602047959], [20.0, 0.17599824001759984, 0.0979990200097999, 0.07799922000779992], [30.0, 0.29100000000000004, 0.16499999999999998, 0.126], [40.0, 1.000010000100001, 0.880008800088001, 0.12000120001200011], [50.0, 1.0, 0.466, 0.534], [60.0, 0.921, 0.696, 0.225], [70.0, 1.0, 0.774, 0.22599999999999998], [80.0, 1.0, 0.696, 0.304], [90.0, 1.0, 0.999, 0.001], [100.0, 1.0, 0.999, 0.001], [110.0, 1.0, 1.0, 0.0], [120.0, 1.0, 1.0, 0.0], [130.0, 1.0, 0.999, 0.001], [140.0, 1.0, 1.0, 0.0], [150.0, 1.0, 1.0, 0.0], [160.0, 1.0, 0.999, 0.001], [170.0, 1.0, 0.993, 0.007000000000000001], [180.0, 0.999990000099999, 0.976990230097699, 0.02299977000229998]], "options": {"labels": ["elapsed", "user+sys__rate", "user__rate", "sys__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "workflow.json#main: cpu"}}, {"data": [[0.0, 4624384], [10.0, 2448408576], [20.0, 2961846272], [30.0, 5181530112], [40.0, 7982759936], [50.0, 34012131328], [60.0, 20183171072], [70.0, 33619623936], [80.0, 34427240448], [90.0, 34427240448], [100.0, 34427240448], [110.0, 34427240448], [120.0, 34427240448], [130.0, 34427240448], [140.0, 34427240448], [150.0, 34427240448], [160.0, 34427240448], [170.0, 34719485952], [180.0, 35532677120]], "options": {"labels": ["elapsed", "rss"], "connectSeparatedPoints": true, "legend": "always", "title": "workflow.json#main: mem"}}, {"data": [[20.0, 6.999930000699993, 6.999930000699993, 0.0], [30.0, 0.0, 0.0, 0.0], [40.0, 7.000070000700007, 7.000070000700007, 0.0], [50.0, 0.0, 0.0, 0.0], [60.0, 0.0, 0.0, 0.0], [70.0, 7.0, 7.0, 0.0], [80.0, 0.0, 0.0, 0.0], [90.0, 0.0, 0.0, 0.0], [100.0, 0.0, 0.0, 0.0], [110.0, 0.0, 0.0, 0.0], [120.0, 0.0, 0.0, 0.0], [130.0, 0.0, 0.0, 0.0], [140.0, 7.0, 7.0, 0.0], [150.0, 0.0, 0.0, 0.0], [160.0, 0.0, 0.0, 0.0], [170.0, 0.0, 0.0, 0.0], [180.0, 0.0, 0.0, 0.0]], "options": {"labels": ["elapsed", "tx+rx__rate", "rx__rate", "tx__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "workflow.json#main: net:eth0"}}, {"data": [[0.0, 0.0, 0.0, 0.0], [10.0, 24253603.5, 24253603.5, 0.0], [20.0, 45681157.2, 45681157.2, 0.0], [30.0, 52392043.6, 52392043.6, 0.0], [40.0, 0.0, 0.0, 0.0], [50.0, 0.0, 0.0, 0.0], [60.0, 3653923.2, 3653923.2, 0.0], [70.0, 0.0, 0.0, 0.0], [81.0, 0.0, 0.0, 0.0], [91.0, 0.0, 0.0, 0.0], [101.0, 0.0, 0.0, 0.0], [111.0, 0.0, 0.0, 0.0], [121.0, 0.0, 0.0, 0.0], [131.0, 0.0, 0.0, 0.0], [141.0, 0.0, 0.0, 0.0], [151.0, 0.0, 0.0, 0.0], [161.0, 0.0, 0.0, 0.0], [171.0, 0.0, 0.0, 0.0], [181.0, 0.0, 0.0, 0.0]], "options": {"labels": ["elapsed", "tx+rx__rate", "rx__rate", "tx__rate"], "connectSeparatedPoints": true, "legend": "always", "title": "workflow.json#main: net:keep0"}}, {"data": [[0.0, 3252957184, 8255877120], [10.0, 3253018624, 8255877120], [20.0, 3253018624, 8255877120], [30.0, 3253018624, 8255877120], [40.0, 3253018624, 8255877120], [50.0, 3253022720, 8255877120], [60.0, 3253022720, 8255877120], [70.0, 3253022720, 8255877120], [80.0, 3253026816, 8255877120], [90.0, 3253026816, 8255877120], [100.0, 3253026816, 8255877120], [110.0, 3253026816, 8255877120], [120.0, 3253026816, 8255877120], [130.0, 3253026816, 8255877120], [140.0, 3253026816, 8255877120], [150.0, 3253026816, 8255877120], [160.0, 3253030912, 8255877120], [170.0, 3253030912, 8255877120], [180.0, 3253030912, 8255877120]], "options": {"labels": ["elapsed", "used", "total"], "connectSeparatedPoints": true, "legend": "always", "title": "workflow.json#main: statfs"}}], "label": "workflow.json#main (2xpu4-xvhdp-86soak6urjxvqqy) -- elapsed time 3m1s"}];
// Copyright (c) 2009 Dan Vanderkam. All rights reserved.
//
// SPDX-License-Identifier: MIT

/**
 * Synchronize zooming and/or selections between a set of dygraphs.
 *
 * Usage:
 *
 *   var g1 = new Dygraph(...),
 *       g2 = new Dygraph(...),
 *       ...;
 *   var sync = Dygraph.synchronize(g1, g2, ...);
 *   // charts are now synchronized
 *   sync.detach();
 *   // charts are no longer synchronized
 *
 * You can set options using the last parameter, for example:
 *
 *   var sync = Dygraph.synchronize(g1, g2, g3, {
 *      selection: true,
 *      zoom: true
 *   });
 *
 * The default is to synchronize both of these.
 *
 * Instead of passing one Dygraph object as each parameter, you may also pass an
 * array of dygraphs:
 *
 *   var sync = Dygraph.synchronize([g1, g2, g3], {
 *      selection: false,
 *      zoom: true
 *   });
 *
 * You may also set `range: false` if you wish to only sync the x-axis.
 * The `range` option has no effect unless `zoom` is true (the default).
 *
 * Original source: https://github.com/danvk/dygraphs/blob/master/src/extras/synchronizer.js
 * at commit b55a71d768d2f8de62877c32b3aec9e9975ac389
 *
 * Copyright (c) 2009 Dan Vanderkam
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
(function() {
/* global Dygraph:false */
'use strict';

var Dygraph;
if (window.Dygraph) {
  Dygraph = window.Dygraph;
} else if (typeof(module) !== 'undefined') {
  Dygraph = require('../dygraph');
}

var synchronize = function(/* dygraphs..., opts */) {
  if (arguments.length === 0) {
    throw 'Invalid invocation of Dygraph.synchronize(). Need >= 1 argument.';
  }

  var OPTIONS = ['selection', 'zoom', 'range'];
  var opts = {
    selection: true,
    zoom: true,
    range: true
  };
  var dygraphs = [];
  var prevCallbacks = [];

  var parseOpts = function(obj) {
    if (!(obj instanceof Object)) {
      throw 'Last argument must be either Dygraph or Object.';
    } else {
      for (var i = 0; i < OPTIONS.length; i++) {
        var optName = OPTIONS[i];
        if (obj.hasOwnProperty(optName)) opts[optName] = obj[optName];
      }
    }
  };

  if (arguments[0] instanceof Dygraph) {
    // Arguments are Dygraph objects.
    for (var i = 0; i < arguments.length; i++) {
      if (arguments[i] instanceof Dygraph) {
        dygraphs.push(arguments[i]);
      } else {
        break;
      }
    }
    if (i < arguments.length - 1) {
      throw 'Invalid invocation of Dygraph.synchronize(). ' +
            'All but the last argument must be Dygraph objects.';
    } else if (i == arguments.length - 1) {
      parseOpts(arguments[arguments.length - 1]);
    }
  } else if (arguments[0].length) {
    // Invoked w/ list of dygraphs, options
    for (var i = 0; i < arguments[0].length; i++) {
      dygraphs.push(arguments[0][i]);
    }
    if (arguments.length == 2) {
      parseOpts(arguments[1]);
    } else if (arguments.length > 2) {
      throw 'Invalid invocation of Dygraph.synchronize(). ' +
            'Expected two arguments: array and optional options argument.';
    }  // otherwise arguments.length == 1, which is fine.
  } else {
    throw 'Invalid invocation of Dygraph.synchronize(). ' +
          'First parameter must be either Dygraph or list of Dygraphs.';
  }

  if (dygraphs.length < 2) {
    throw 'Invalid invocation of Dygraph.synchronize(). ' +
          'Need two or more dygraphs to synchronize.';
  }

  var readycount = dygraphs.length;
  for (var i = 0; i < dygraphs.length; i++) {
    var g = dygraphs[i];
    g.ready( function() {
      if (--readycount == 0) {
        // store original callbacks
        var callBackTypes = ['drawCallback', 'highlightCallback', 'unhighlightCallback'];
        for (var j = 0; j < dygraphs.length; j++) {
          if (!prevCallbacks[j]) {
            prevCallbacks[j] = {};
          }
          for (var k = callBackTypes.length - 1; k >= 0; k--) {
            prevCallbacks[j][callBackTypes[k]] = dygraphs[j].getFunctionOption(callBackTypes[k]);
          }
        }

        // Listen for draw, highlight, unhighlight callbacks.
        if (opts.zoom) {
          attachZoomHandlers(dygraphs, opts, prevCallbacks);
        }

        if (opts.selection) {
          attachSelectionHandlers(dygraphs, prevCallbacks);
        }
      }
    });
  }

  return {
    detach: function() {
      for (var i = 0; i < dygraphs.length; i++) {
        var g = dygraphs[i];
        if (opts.zoom) {
          g.updateOptions({drawCallback: prevCallbacks[i].drawCallback});
        }
        if (opts.selection) {
          g.updateOptions({
            highlightCallback: prevCallbacks[i].highlightCallback,
            unhighlightCallback: prevCallbacks[i].unhighlightCallback
          });
        }
      }
      // release references & make subsequent calls throw.
      dygraphs = null;
      opts = null;
      prevCallbacks = null;
    }
  };
};

function arraysAreEqual(a, b) {
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  var i = a.length;
  if (i !== b.length) return false;
  while (i--) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

function attachZoomHandlers(gs, syncOpts, prevCallbacks) {
  var block = false;
  for (var i = 0; i < gs.length; i++) {
    var g = gs[i];
    g.updateOptions({
      drawCallback: function(me, initial) {
        if (block || initial) return;
        block = true;
        var opts = {
          dateWindow: me.xAxisRange()
        };
        if (syncOpts.range) opts.valueRange = me.yAxisRange();

        for (var j = 0; j < gs.length; j++) {
          if (gs[j] == me) {
            if (prevCallbacks[j] && prevCallbacks[j].drawCallback) {
              prevCallbacks[j].drawCallback.apply(this, arguments);
            }
            continue;
          }

          // Only redraw if there are new options
          if (arraysAreEqual(opts.dateWindow, gs[j].getOption('dateWindow')) && 
              arraysAreEqual(opts.valueRange, gs[j].getOption('valueRange'))) {
            continue;
          }

          gs[j].updateOptions(opts);
        }
        block = false;
      }
    }, true /* no need to redraw */);
  }
}

function attachSelectionHandlers(gs, prevCallbacks) {
  var block = false;
  for (var i = 0; i < gs.length; i++) {
    var g = gs[i];

    g.updateOptions({
      highlightCallback: function(event, x, points, row, seriesName) {
        if (block) return;
        block = true;
        var me = this;
        for (var i = 0; i < gs.length; i++) {
          if (me == gs[i]) {
            if (prevCallbacks[i] && prevCallbacks[i].highlightCallback) {
              prevCallbacks[i].highlightCallback.apply(this, arguments);
            }
            continue;
          }
          var idx = gs[i].getRowForX(x);
          if (idx !== null) {
            gs[i].setSelection(idx, seriesName);
          }
        }
        block = false;
      },
      unhighlightCallback: function(event) {
        if (block) return;
        block = true;
        var me = this;
        for (var i = 0; i < gs.length; i++) {
          if (me == gs[i]) {
            if (prevCallbacks[i] && prevCallbacks[i].unhighlightCallback) {
              prevCallbacks[i].unhighlightCallback.apply(this, arguments);
            }
            continue;
          }
          gs[i].clearSelection();
        }
        block = false;
      }
    }, true /* no need to redraw */);
  }
}

Dygraph.synchronize = synchronize;

})();

// Copyright (C) The Arvados Authors. All rights reserved.
//
// SPDX-License-Identifier: AGPL-3.0

window.onload = function() {
    var charts = {};
    var fmt = {
        iso: function(y) {
            var s='';
            if (y > 1000000000) { y=y/1000000000; s='G'; }
            else if (y > 1000000) { y=y/1000000; s='M'; }
            else if (y > 1000) { y=y/1000; s='K'; }
            return y.toFixed(2).replace(/\.0+$/, '')+s;
        },
        time: function(s) {
            var ret = ''
            if (s >= 86400) ret += Math.floor(s/86400) + 'd'
            if (s >= 3600) ret += Math.floor(s/3600)%24 + 'h'
            if (s >= 60) ret += Math.floor(s/60)%60 + 'm'
            ret += Math.floor(s)%60 + 's'
            // finally, strip trailing zeroes: 1d0m0s -> 1d
            return ret.replace(/(\D)(0\D)*$/, '$1')
        },
    }
    var ticker = {
        time: function(min, max, pixels, opts, dg) {
            var max_ticks = Math.floor(pixels / opts('pixelsPerLabel'))
            var natural = [1, 5, 10, 30, 60,
                           120, 300, 600, 1800, 3600,
                           7200, 14400, 43200, 86400]
            var interval = natural.shift()
            while (max>min && (max-min)/interval > max_ticks) {
                interval = natural.shift() || (interval * 2)
            }
            var ticks = []
            for (var i=Math.ceil(min/interval)*interval; i<=max; i+=interval) {
                ticks.push({v: i, label: fmt.time(i)})
            }
            return ticks
        },
    }
    chartdata.forEach(function(section, section_idx) {
        var h1 = document.createElement('h1');
        h1.appendChild(document.createTextNode(section.label));
        document.body.appendChild(h1);
        section.charts.forEach(function(chart, chart_idx) {
            // Skip chart if every series has zero data points
            if (0 == chart.data.reduce(function(len, series) {
                return len + series.length;
            }, 0)) {
                return;
            }
            var id = 'chart-'+section_idx+'-'+chart_idx;
            var div = document.createElement('div');
            div.setAttribute('id', id);
            div.setAttribute('style', 'width: 100%; height: 150px');
            document.body.appendChild(div);
            chart.options.valueFormatter = function(y) {
            }
            chart.options.axes = {
                x: {
                    axisLabelFormatter: fmt.time,
                    valueFormatter: fmt.time,
                    ticker: ticker.time,
                },
                y: {
                    axisLabelFormatter: fmt.iso,
                    valueFormatter: fmt.iso,
                },
            }
            charts[id] = new Dygraph(div, chart.data, chart.options);
        });
    });

    var sync = Dygraph.synchronize(Object.values(charts), {range: false});

    if (typeof window.debug === 'undefined')
        window.debug = {};
    window.debug.charts = charts;
};
</script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dygraph/2.0.0/dygraph.min.css">

        </head><body></body></html>
        